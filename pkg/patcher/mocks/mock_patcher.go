// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/pkg/patcher (interfaces: Patcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/pkg/planner/models"
)

// MockPatcher is a mock of Patcher interface.
type MockPatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPatcherMockRecorder
}

// MockPatcherMockRecorder is the mock recorder for MockPatcher.
type MockPatcherMockRecorder struct {
	mock *MockPatcher
}

// NewMockPatcher creates a new mock instance.
func NewMockPatcher(ctrl *gomock.Controller) *MockPatcher {
	mock := &MockPatcher{ctrl: ctrl}
	mock.recorder = &MockPatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatcher) EXPECT() *MockPatcherMockRecorder {
	return m.recorder
}

// Patch mocks base method.
func (m *MockPatcher) Patch(arg0 string, arg1 models.Plan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockPatcherMockRecorder) Patch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPatcher)(nil).Patch), arg0, arg1)
}
